@using EventR.Cli.Requests.Queries.GetEndpoints
@using EventR.Cli.Services
@using EventR.Cli.DTOs

@inject IRequestDispatcher RequestDispatcher

<MudDialog>
    <DialogContent>
        <MudSelect @bind-Value="_selectedEndpoint" Label="Target" ToStringFunc="@((ep) => ep?.Name)" Variant="Variant.Outlined">
            @foreach (var endpoint in _endpoints)
            {
                <MudSelectItem Disabled="@(endpoint.Status != EndpointStatus.Running)" Value="endpoint">
                    @endpoint.Name
                </MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled=@(!CanSubmit)>Send</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public string? InitialEndpointIdentifier { get; set; }

    [CascadingParameter]
    public IMudDialogInstance DialogInstance { get; set; } = null!;

    private EndpointDto? _selectedEndpoint;

    private IEnumerable<EndpointDto> _endpoints = [];

    private bool CanSubmit => _selectedEndpoint != null;

    protected override void OnInitialized()
    {
        _endpoints = RequestDispatcher.DispatchQuery(new GetEndpointsQuery());
        _selectedEndpoint = _endpoints.FirstOrDefault(ep => ep.Identifier == InitialEndpointIdentifier);
    }

    private void Cancel()
    {
        DialogInstance.Cancel();
    }

    private void Submit()
    {
        DialogInstance.Close(_selectedEndpoint);
    }
}